# alembic/versions/843e0cb363ac_sync_classes_and_enrollments.py

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '843e0cb363ac'
down_revision: Union[str, None] = '08271459c983'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

STUDENT_PROGRESS_SUMMARY_VIEW_SQL = """
CREATE VIEW student_progress_summary AS
SELECT 
    u.id,
    u.first_name || ' ' || u.last_name AS full_name,
    u.email,
    c.name AS class_name,
    co.name AS course_name,
    co.level AS course_level,
    ce.enrollment_date,
    ce.attendance_rate,
    ce.final_grade,
    AVG(ta.percentage_score) AS avg_test_score,
    COUNT(ar.id) FILTER (WHERE ar.status = 'present') AS classes_attended,
    COUNT(cs.id) AS total_classes,
    lp.current_progress AS learning_path_progress
FROM users u
JOIN class_enrollments ce ON u.id = ce.student_id
JOIN classes c ON ce.class_id = c.id
JOIN courses co ON c.course_id = co.id
LEFT JOIN test_attempts ta ON u.id = ta.student_id
LEFT JOIN attendance_records ar ON u.id = ar.student_id
LEFT JOIN class_sessions cs ON c.id = cs.class_id
LEFT JOIN learning_paths lp ON u.id = lp.student_id AND lp.active = true
WHERE u.role = 'student' AND u.status = 'active' AND ce.status = 'active'
GROUP BY u.id, u.first_name, u.last_name, u.email, c.name, co.name, co.level,
         ce.enrollment_date, ce.attendance_rate, ce.final_grade, lp.current_progress;
"""

CLASS_SCHEDULE_VIEW_SQL = """
CREATE VIEW class_schedule_view AS
SELECT 
    cs.id AS session_id,
    cs.session_date,
    cs.start_time,
    cs.end_time,
    c.name AS class_name,
    co.name AS course_name,
    co.level,
    u.first_name || ' ' || u.last_name AS teacher_name,
    r.name AS room_name,
    r.capacity AS room_capacity,
    c.current_students,
    cs.status AS session_status,
    cs.topic,
    cs.attendance_taken
FROM class_sessions cs
JOIN classes c ON cs.class_id = c.id
JOIN courses co ON c.course_id = co.id
JOIN users u ON cs.teacher_id = u.id
LEFT JOIN rooms r ON cs.room_id = r.id
WHERE cs.session_date >= CURRENT_DATE - INTERVAL '7 days'
ORDER BY cs.session_date, cs.start_time;
"""

TEACHER_PERFORMANCE_SUMMARY_VIEW_SQL="""
CREATE VIEW teacher_performance_summary AS
SELECT 
    u.id,
    u.first_name || ' ' || u.last_name AS full_name,
    u.email,
    tk.period_start,
    tk.period_end,
    tk.performance_score,
    tk.salary_rank,
    tk.approved,
    COUNT(DISTINCT c.id) AS classes_taught,
    COUNT(DISTINCT cs.id) AS sessions_completed,
    AVG(te.overall_rating) AS avg_student_rating,
    COUNT(DISTINCT ce.student_id) AS total_students
FROM users u
LEFT JOIN teacher_kpis tk ON u.id = tk.teacher_id
LEFT JOIN classes c ON u.id = c.teacher_id
LEFT JOIN class_sessions cs ON c.id = cs.class_id AND cs.status = 'completed'
LEFT JOIN teacher_evaluations te ON u.id = te.teacher_id AND te.evaluation_type = 'student_evaluation'
LEFT JOIN class_enrollments ce ON c.id = ce.class_id AND ce.status = 'active'
WHERE u.role = 'teacher' AND u.status = 'active'
GROUP BY u.id, u.first_name, u.last_name, u.email, tk.period_start, tk.period_end, 
         tk.performance_score, tk.salary_rank, tk.approved;
"""


# 
# KHU VỰC ĐỊNH NGHĨA VIEW SQL SẼ ĐƯỢC THÊM VÀO ĐÂY BẰNG CÁCH THỦ CÔNG
# 

def upgrade() -> None:
    # 1. DROP CÁC VIEW PHỤ THUỘC (BẮT BUỘC TRƯỚC KHI THAY ĐỔI CỘT)
    op.execute("DROP VIEW IF EXISTS student_progress_summary;")
    op.execute("DROP VIEW IF EXISTS class_schedule_view;")
    op.execute("DROP VIEW IF EXISTS teacher_performance_summary;")
    
    # ### commands auto generated by Alembic - please adjust! ###
    
    # === CLASS ENROLLMENTS ===
    op.add_column('class_enrollments', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('class_enrollments', sa.Column('created_by', sa.UUID(), nullable=True))
    op.add_column('class_enrollments', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.drop_index('idx_class_enrollments_payment', table_name='class_enrollments')
    op.drop_index('idx_class_enrollments_status', table_name='class_enrollments')
    op.drop_index('idx_class_enrollments_student', table_name='class_enrollments')
    op.drop_index('idx_class_enrollments_unique', table_name='class_enrollments')
    op.create_unique_constraint('uq_class_student_enrollment', 'class_enrollments', ['class_id', 'student_id'])
    # TẠO FOREIGN KEY cho ENROLLMENTS
    op.create_foreign_key('fk_ce_updated_by', 'class_enrollments', 'users', ['updated_by'], ['id'])
    op.create_foreign_key('fk_ce_created_by', 'class_enrollments', 'users', ['created_by'], ['id'])
    
    # === CLASSES ===
    op.add_column('classes', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('classes', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.alter_column('classes', 'current_students',
                 existing_type=sa.INTEGER(),
                 nullable=False,
                 existing_server_default=sa.text('0'))
    op.alter_column('classes', 'status',
                 existing_type=postgresql.ENUM('scheduled', 'active', 'completed', 'cancelled', 'postponed', name='class_status'),
                 type_=sa.Enum('scheduled', 'active', 'completed', 'cancelled', 'postponed', name='class_status', native_enum=True), # Đã sửa native_enum=True
                 nullable=False,
                 existing_server_default=sa.text("'scheduled'::class_status"))
    op.drop_index('idx_classes_course_id', table_name='classes')
    op.drop_index('idx_classes_dates', table_name='classes')
    op.drop_index('idx_classes_room_id', table_name='classes')
    op.drop_index('idx_classes_status', table_name='classes')
    op.drop_index('idx_classes_teacher_id', table_name='classes')
    op.drop_index('idx_classes_teacher_status', table_name='classes')
    op.drop_constraint('classes_created_by_fkey', 'classes', type_='foreignkey') # Xóa FK cũ
    # TẠO FOREIGN KEY cho CLASSES
    op.create_foreign_key('fk_c_created_by', 'classes', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('fk_c_updated_by', 'classes', 'users', ['updated_by'], ['id'])
    
    # === CÁC BẢNG KHÁC (COURSES, ROOMS) ===
    # courses.level
    op.alter_column('courses', 'level',
                 existing_type=sa.VARCHAR(length=18),
                 type_=sa.Enum('beginner', 'elementary', 'intermediate', 'upper_intermediate', 'advanced', 'proficiency', name='course_level'),
                 existing_nullable=False,
                 # FIX QUAN TRỌNG: SỬ DỤNG server_default DỰA TRÊN USING
                 postgresql_using='level::course_level') # Cung cấp chuỗi SQL thô
                 
    # courses.course_type
    op.alter_column('courses', 'course_type',
                 existing_type=sa.VARCHAR(length=15),
                 type_=sa.Enum('general_english', 'ielts', 'toeic', 'toefl', 'business', 'conversation', 'grammar', 'writing', name='course_type'),
                 existing_nullable=False,
                 existing_server_default=sa.text("'general_english'::course_type"),
                 postgresql_using='course_type::course_type') # Cung cấp chuỗi SQL thô
                 
    # courses.status
    op.alter_column('courses', 'status',
                 existing_type=sa.VARCHAR(length=8),
                 type_=sa.Enum('active', 'inactive', 'archived', name='course_status'),
                 existing_nullable=False,
                 existing_server_default=sa.text("'active'::course_status"),
                 postgresql_using='status::course_status') # Cung cấp chuỗi SQL thô
                 
    # rooms.room_type
    op.alter_column('rooms', 'room_type',
                 existing_type=sa.VARCHAR(length=12),
                 type_=sa.Enum('classroom', 'computer_lab', 'meeting_room', 'auditorium', 'library', name='room_type'),
                 existing_nullable=False,
                 existing_server_default=sa.text("'classroom'::room_type"),
                 postgresql_using='room_type::room_type')
                 
    # rooms.status
    op.alter_column('rooms', 'status',
                 existing_type=sa.VARCHAR(length=11),
                 type_=sa.Enum('available', 'maintenance', 'unavailable', 'reserved', name='room_status'),
                 existing_nullable=False,
                 existing_server_default=sa.text("'available'::room_status"),
                 postgresql_using='status::room_status')

    # 2. TẠO LẠI CÁC VIEW (Sau khi sửa cột)
    op.execute(STUDENT_PROGRESS_SUMMARY_VIEW_SQL)
    op.execute(CLASS_SCHEDULE_VIEW_SQL)
    op.execute(TEACHER_PERFORMANCE_SUMMARY_VIEW_SQL)
    ### end Alembic commands ###


def downgrade() -> None:
    # 1. DROP CÁC VIEW PHỤ THUỘC (BẮT BUỘC)
    op.execute("DROP VIEW IF EXISTS student_progress_summary;")
    op.execute("DROP VIEW IF EXISTS class_schedule_view;")
    op.execute("DROP VIEW IF EXISTS teacher_performance_summary;")

    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('rooms', 'status',
                 existing_type=sa.Enum('available', 'maintenance', 'unavailable', 'reserved', name='room_status'),
                 type_=sa.VARCHAR(length=11),
                 existing_nullable=False,
                 existing_server_default=sa.text("'available'::room_status"))
    op.alter_column('rooms', 'room_type',
                 existing_type=sa.Enum('classroom', 'computer_lab', 'meeting_room', 'auditorium', 'library', name='room_type'),
                 type_=sa.VARCHAR(length=12),
                 existing_nullable=False,
                 existing_server_default=sa.text("'classroom'::room_type"))
    op.alter_column('courses', 'status',
                 existing_type=sa.Enum('active', 'inactive', 'archived', name='course_status'),
                 type_=sa.VARCHAR(length=8),
                 existing_nullable=False,
                 existing_server_default=sa.text("'active'::course_status"))
    op.alter_column('courses', 'course_type',
                 existing_type=sa.Enum('general_english', 'ielts', 'toeic', 'toefl', 'business', 'conversation', 'grammar', 'writing', name='course_type'),
                 type_=sa.VARCHAR(length=15),
                 existing_nullable=False,
                 existing_server_default=sa.text("'general_english'::course_type"))
    op.alter_column('courses', 'level',
                 existing_type=sa.Enum('beginner', 'elementary', 'intermediate', 'upper_intermediate', 'advanced', 'proficiency', name='course_level'),
                 type_=sa.VARCHAR(length=18),
                 existing_nullable=False)
    
    # DROP FOREIGN KEY cho CLASSES
    op.drop_constraint('fk_c_updated_by', 'classes', type_='foreignkey')
    op.drop_constraint('fk_c_created_by', 'classes', type_='foreignkey')
    op.create_foreign_key('classes_created_by_fkey', 'classes', 'users', ['created_by'], ['id']) # FK cũ
    
    # DROP INDEXES
    op.create_index('idx_classes_teacher_status', 'classes', ['teacher_id', 'status'], unique=False)
    op.create_index('idx_classes_teacher_id', 'classes', ['teacher_id'], unique=False)
    op.create_index('idx_classes_status', 'classes', ['status'], unique=False)
    op.create_index('idx_classes_room_id', 'classes', ['room_id'], unique=False)
    op.create_index('idx_classes_dates', 'classes', ['start_date', 'end_date'], unique=False)
    op.create_index('idx_classes_course_id', 'classes', ['course_id'], unique=False)
    
    # ALTER COLUMN CLASSES
    op.alter_column('classes', 'status',
                 existing_type=sa.Enum('scheduled', 'active', 'completed', 'cancelled', 'postponed', name='class_status'),
                 type_=postgresql.ENUM('scheduled', 'active', 'completed', 'cancelled', 'postponed', name='class_status'),
                 nullable=True,
                 existing_server_default=sa.text("'scheduled'::class_status"))
    op.alter_column('classes', 'current_students',
                 existing_type=sa.INTEGER(),
                 nullable=True,
                 existing_server_default=sa.text('0'))
    op.drop_column('classes', 'updated_by')
    op.drop_column('classes', 'deleted_at')
    
    # DROP FOREIGN KEY cho ENROLLMENTS
    op.drop_constraint('fk_ce_updated_by', 'class_enrollments', type_='foreignkey')
    op.drop_constraint('fk_ce_created_by', 'class_enrollments', type_='foreignkey')
    op.drop_constraint('uq_class_student_enrollment', 'class_enrollments', type_='unique')
    
    # CREATE INDEXES cho ENROLLMENTS (Hoàn tác)
    op.create_index('idx_class_enrollments_unique', 'class_enrollments', ['class_id', 'student_id'], unique=True)
    op.create_index('idx_class_enrollments_student', 'class_enrollments', ['student_id'], unique=False)
    op.create_index('idx_class_enrollments_status', 'class_enrollments', ['status'], unique=False)
    op.create_index('idx_class_enrollments_payment', 'class_enrollments', ['payment_status'], unique=False)
    
    op.drop_column('class_enrollments', 'updated_by')
    op.drop_column('class_enrollments', 'created_by')
    op.drop_column('class_enrollments', 'deleted_at')
    # ### end Alembic commands ###

    # 2. RECREATE VIEW (Sau khi hoàn tác)
    op.execute(STUDENT_PROGRESS_SUMMARY_VIEW_SQL)
    op.execute(CLASS_SCHEDULE_VIEW_SQL)
    op.execute(TEACHER_PERFORMANCE_SUMMARY_VIEW_SQL)