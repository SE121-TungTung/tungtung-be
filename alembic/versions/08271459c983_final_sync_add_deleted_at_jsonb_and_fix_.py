"""Final sync: Add deleted_at, JSONB, and fix Enum naming

Revision ID: 08271459c983
Revises: 
Create Date: 2025-10-19 12:05:35.077146

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '08271459c983'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

STUDENT_PROGRESS_SUMMARY_VIEW_SQL = """
CREATE VIEW student_progress_summary AS
SELECT 
    u.id,
    u.first_name || ' ' || u.last_name AS full_name,
    u.email,
    c.name AS class_name,
    co.name AS course_name,
    co.level AS course_level,
    ce.enrollment_date,
    ce.attendance_rate,
    ce.final_grade,
    AVG(ta.percentage_score) AS avg_test_score,
    COUNT(ar.id) FILTER (WHERE ar.status = 'present') AS classes_attended,
    COUNT(cs.id) AS total_classes,
    lp.current_progress AS learning_path_progress
FROM users u
JOIN class_enrollments ce ON u.id = ce.student_id
JOIN classes c ON ce.class_id = c.id
JOIN courses co ON c.course_id = co.id
LEFT JOIN test_attempts ta ON u.id = ta.student_id
LEFT JOIN attendance_records ar ON u.id = ar.student_id
LEFT JOIN class_sessions cs ON c.id = cs.class_id
LEFT JOIN learning_paths lp ON u.id = lp.student_id AND lp.active = true
WHERE u.role = 'student' AND u.status = 'active' AND ce.status = 'active'
GROUP BY u.id, u.first_name, u.last_name, u.email, c.name, co.name, co.level,
         ce.enrollment_date, ce.attendance_rate, ce.final_grade, lp.current_progress;
"""

CLASS_SCHEDULE_VIEW_SQL = """
CREATE VIEW class_schedule_view AS
SELECT 
    cs.id AS session_id,
    cs.session_date,
    cs.start_time,
    cs.end_time,
    c.name AS class_name,
    co.name AS course_name,
    co.level,
    u.first_name || ' ' || u.last_name AS teacher_name,
    r.name AS room_name,
    r.capacity AS room_capacity,
    c.current_students,
    cs.status AS session_status,
    cs.topic,
    cs.attendance_taken
FROM class_sessions cs
JOIN classes c ON cs.class_id = c.id
JOIN courses co ON c.course_id = co.id
JOIN users u ON cs.teacher_id = u.id
LEFT JOIN rooms r ON cs.room_id = r.id
WHERE cs.session_date >= CURRENT_DATE - INTERVAL '7 days'
ORDER BY cs.session_date, cs.start_time;
"""

TEACHER_PERFORMANCE_SUMMARY_VIEW_SQL="""
CREATE VIEW teacher_performance_summary AS
SELECT 
    u.id,
    u.first_name || ' ' || u.last_name AS full_name,
    u.email,
    tk.period_start,
    tk.period_end,
    tk.performance_score,
    tk.salary_rank,
    tk.approved,
    COUNT(DISTINCT c.id) AS classes_taught,
    COUNT(DISTINCT cs.id) AS sessions_completed,
    AVG(te.overall_rating) AS avg_student_rating,
    COUNT(DISTINCT ce.student_id) AS total_students
FROM users u
LEFT JOIN teacher_kpis tk ON u.id = tk.teacher_id
LEFT JOIN classes c ON u.id = c.teacher_id
LEFT JOIN class_sessions cs ON c.id = cs.class_id AND cs.status = 'completed'
LEFT JOIN teacher_evaluations te ON u.id = te.teacher_id AND te.evaluation_type = 'student_evaluation'
LEFT JOIN class_enrollments ce ON c.id = ce.class_id AND ce.status = 'active'
WHERE u.role = 'teacher' AND u.status = 'active'
GROUP BY u.id, u.first_name, u.last_name, u.email, tk.period_start, tk.period_end, 
         tk.performance_score, tk.salary_rank, tk.approved;
"""

def upgrade() -> None:

    op.execute("DROP VIEW IF EXISTS student_progress_summary;", execution_options={"autocommit": True})
    op.execute("DROP VIEW IF EXISTS class_schedule_view;", execution_options={"autocommit": True})
    op.execute("DROP VIEW IF EXISTS teacher_performance_summary;", execution_options={"autocommit": True})
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('courses', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('courses', 'level',
               existing_type=postgresql.ENUM('beginner', 'elementary', 'intermediate', 'upper_intermediate', 'advanced', 'proficiency', name='course_level'),
               type_=sa.Enum('beginner', 'elementary', 'intermediate', 'upper_intermediate', 'advanced', 'proficiency', name='course_level', native_enum=False),
               existing_nullable=False)
    op.alter_column('courses', 'course_type',
               existing_type=postgresql.ENUM('general_english', 'ielts', 'toeic', 'toefl', 'business', 'conversation', 'grammar', 'writing', name='course_type'),
               type_=sa.Enum('general_english', 'ielts', 'toeic', 'toefl', 'business', 'conversation', 'grammar', 'writing', name='course_type', native_enum=False),
               existing_nullable=False,
               existing_server_default=sa.text("'general_english'::course_type"))
    op.alter_column('courses', 'max_students',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('25'))
    op.alter_column('courses', 'min_students',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('8'))
    op.alter_column('courses', 'status',
               existing_type=postgresql.ENUM('active', 'inactive', 'archived', name='course_status'),
               type_=sa.Enum('active', 'inactive', 'archived', name='course_status', native_enum=False),
               nullable=False,
               existing_server_default=sa.text("'active'::course_status"))
    op.drop_index('idx_courses_level', table_name='courses')
    op.drop_index('idx_courses_status', table_name='courses')
    op.drop_index('idx_courses_type', table_name='courses')
    op.add_column('password_reset_otps', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('password_reset_otps', sa.Column('created_by', sa.UUID(), nullable=True))
    op.add_column('password_reset_otps', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.alter_column('password_reset_otps', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('password_reset_otps', 'otp_code',
               existing_type=sa.TEXT(),
               type_=sa.String(length=6),
               nullable=False)
    op.alter_column('password_reset_otps', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('password_reset_otps', 'attempts',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('password_reset_otps', 'max_attempts',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('password_reset_otps', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_password_reset_otps_email'), 'password_reset_otps', ['email'], unique=False)
    op.create_foreign_key(None, 'password_reset_otps', 'users', ['created_by'], ['id'])
    op.create_foreign_key(None, 'password_reset_otps', 'users', ['updated_by'], ['id'])
    op.add_column('rooms', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('rooms', sa.Column('created_by', sa.UUID(), nullable=True))
    op.add_column('rooms', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.alter_column('rooms', 'room_type',
               existing_type=postgresql.ENUM('classroom', 'computer_lab', 'meeting_room', 'auditorium', 'library', name='room_type'),
               type_=sa.Enum('classroom', 'computer_lab', 'meeting_room', 'auditorium', 'library', name='room_type', native_enum=False),
               nullable=False,
               existing_server_default=sa.text("'classroom'::room_type"))
    op.alter_column('rooms', 'status',
               existing_type=postgresql.ENUM('available', 'maintenance', 'unavailable', 'reserved', name='room_status'),
               type_=sa.Enum('available', 'maintenance', 'unavailable', 'reserved', name='room_status', native_enum=False),
               nullable=False,
               existing_server_default=sa.text("'available'::room_status"))
    op.drop_index('idx_rooms_capacity', table_name='rooms')
    op.drop_index('idx_rooms_status', table_name='rooms')
    op.drop_index('idx_rooms_type', table_name='rooms')
    op.create_foreign_key(None, 'rooms', 'users', ['updated_by'], ['id'])
    op.create_foreign_key(None, 'rooms', 'users', ['created_by'], ['id'])
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('student', 'teacher', 'office_admin', 'center_admin', 'system_admin', name='user_role'),
               type_=sa.Enum('student', 'teacher', 'office_admin', 'center_admin', 'system_admin', name='user_role', native_enum=False),
               existing_nullable=False,
               existing_server_default=sa.text("'student'::user_role"))
    op.alter_column('users', 'status',
               existing_type=postgresql.ENUM('active', 'inactive', 'suspended', 'pending_activation', name='user_status'),
               type_=sa.Enum('active', 'inactive', 'suspended', 'pending_activation', name='user_status', native_enum=False),
               existing_nullable=False,
               existing_server_default=sa.text("'active'::user_status"))
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_email_status', table_name='users')
    op.drop_index('idx_users_phone', table_name='users')
    op.drop_index('idx_users_role', table_name='users')
    op.drop_index('idx_users_role_status', table_name='users')
    op.drop_index('idx_users_status', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_phone'), 'users', ['phone'], unique=False)
    # ### end Alembic commands ###

    op.execute(STUDENT_PROGRESS_SUMMARY_VIEW_SQL)
    op.execute(CLASS_SCHEDULE_VIEW_SQL)
    op.execute(TEACHER_PERFORMANCE_SUMMARY_VIEW_SQL)


def downgrade() -> None:

    op.execute("DROP VIEW IF EXISTS student_progress_summary;", execution_options={"autocommit": True})
    op.execute("DROP VIEW IF EXISTS class_schedule_view;", execution_options={"autocommit": True})
    op.execute("DROP VIEW IF EXISTS teacher_performance_summary;", execution_options={"autocommit": True})

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_phone'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_status', 'users', ['status'], unique=False)
    op.create_index('idx_users_role_status', 'users', ['role', 'status'], unique=False)
    op.create_index('idx_users_role', 'users', ['role'], unique=False)
    op.create_index('idx_users_phone', 'users', ['phone'], unique=False)
    op.create_index('idx_users_email_status', 'users', ['email', 'status'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.alter_column('users', 'status',
               existing_type=sa.Enum('active', 'inactive', 'suspended', 'pending_activation', name='user_status', native_enum=False),
               type_=postgresql.ENUM('active', 'inactive', 'suspended', 'pending_activation', name='user_status'),
               existing_nullable=False,
               existing_server_default=sa.text("'active'::user_status"))
    op.alter_column('users', 'role',
               existing_type=sa.Enum('student', 'teacher', 'office_admin', 'center_admin', 'system_admin', name='user_role', native_enum=False),
               type_=postgresql.ENUM('student', 'teacher', 'office_admin', 'center_admin', 'system_admin', name='user_role'),
               existing_nullable=False,
               existing_server_default=sa.text("'student'::user_role"))
    op.drop_column('users', 'deleted_at')
    op.drop_constraint(None, 'rooms', type_='foreignkey')
    op.drop_constraint(None, 'rooms', type_='foreignkey')
    op.create_index('idx_rooms_type', 'rooms', ['room_type'], unique=False)
    op.create_index('idx_rooms_status', 'rooms', ['status'], unique=False)
    op.create_index('idx_rooms_capacity', 'rooms', ['capacity'], unique=False)
    op.alter_column('rooms', 'status',
               existing_type=sa.Enum('available', 'maintenance', 'unavailable', 'reserved', name='room_status', native_enum=False),
               type_=postgresql.ENUM('available', 'maintenance', 'unavailable', 'reserved', name='room_status'),
               nullable=True,
               existing_server_default=sa.text("'available'::room_status"))
    op.alter_column('rooms', 'room_type',
               existing_type=sa.Enum('classroom', 'computer_lab', 'meeting_room', 'auditorium', 'library', name='room_type', native_enum=False),
               type_=postgresql.ENUM('classroom', 'computer_lab', 'meeting_room', 'auditorium', 'library', name='room_type'),
               nullable=True,
               existing_server_default=sa.text("'classroom'::room_type"))
    op.drop_column('rooms', 'updated_by')
    op.drop_column('rooms', 'created_by')
    op.drop_column('rooms', 'deleted_at')
    op.drop_constraint(None, 'password_reset_otps', type_='foreignkey')
    op.drop_constraint(None, 'password_reset_otps', type_='foreignkey')
    op.drop_index(op.f('ix_password_reset_otps_email'), table_name='password_reset_otps')
    op.alter_column('password_reset_otps', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('password_reset_otps', 'max_attempts',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               existing_nullable=True)
    op.alter_column('password_reset_otps', 'attempts',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               existing_nullable=True)
    op.alter_column('password_reset_otps', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('password_reset_otps', 'otp_code',
               existing_type=sa.String(length=6),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('password_reset_otps', 'email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=True)
    op.drop_column('password_reset_otps', 'updated_by')
    op.drop_column('password_reset_otps', 'created_by')
    op.drop_column('password_reset_otps', 'deleted_at')
    op.create_index('idx_courses_type', 'courses', ['course_type'], unique=False)
    op.create_index('idx_courses_status', 'courses', ['status'], unique=False)
    op.create_index('idx_courses_level', 'courses', ['level'], unique=False)
    op.alter_column('courses', 'status',
               existing_type=sa.Enum('active', 'inactive', 'archived', name='course_status', native_enum=False),
               type_=postgresql.ENUM('active', 'inactive', 'archived', name='course_status'),
               nullable=True,
               existing_server_default=sa.text("'active'::course_status"))
    op.alter_column('courses', 'min_students',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('8'))
    op.alter_column('courses', 'max_students',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('25'))
    op.alter_column('courses', 'course_type',
               existing_type=sa.Enum('general_english', 'ielts', 'toeic', 'toefl', 'business', 'conversation', 'grammar', 'writing', name='course_type', native_enum=False),
               type_=postgresql.ENUM('general_english', 'ielts', 'toeic', 'toefl', 'business', 'conversation', 'grammar', 'writing', name='course_type'),
               existing_nullable=False,
               existing_server_default=sa.text("'general_english'::course_type"))
    op.alter_column('courses', 'level',
               existing_type=sa.Enum('beginner', 'elementary', 'intermediate', 'upper_intermediate', 'advanced', 'proficiency', name='course_level', native_enum=False),
               type_=postgresql.ENUM('beginner', 'elementary', 'intermediate', 'upper_intermediate', 'advanced', 'proficiency', name='course_level'),
               existing_nullable=False)
    op.drop_column('courses', 'deleted_at')
    # ### end Alembic commands ###

    op.execute(STUDENT_PROGRESS_SUMMARY_VIEW_SQL)
    op.execute(CLASS_SCHEDULE_VIEW_SQL)
    op.execute(TEACHER_PERFORMANCE_SUMMARY_VIEW_SQL)
